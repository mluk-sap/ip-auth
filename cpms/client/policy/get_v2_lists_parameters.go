// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetV2ListsParams creates a new GetV2ListsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetV2ListsParams() *GetV2ListsParams {
	return &GetV2ListsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetV2ListsParamsWithTimeout creates a new GetV2ListsParams object
// with the ability to set a timeout on a request.
func NewGetV2ListsParamsWithTimeout(timeout time.Duration) *GetV2ListsParams {
	return &GetV2ListsParams{
		timeout: timeout,
	}
}

// NewGetV2ListsParamsWithContext creates a new GetV2ListsParams object
// with the ability to set a context for a request.
func NewGetV2ListsParamsWithContext(ctx context.Context) *GetV2ListsParams {
	return &GetV2ListsParams{
		Context: ctx,
	}
}

// NewGetV2ListsParamsWithHTTPClient creates a new GetV2ListsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetV2ListsParamsWithHTTPClient(client *http.Client) *GetV2ListsParams {
	return &GetV2ListsParams{
		HTTPClient: client,
	}
}

/*
GetV2ListsParams contains all the parameters to send to the API endpoint

	for the get v2 lists operation.

	Typically these are written to a http.Request.
*/
type GetV2ListsParams struct {

	/* PolicyIDs.

	   A comma separated list of projectID/policyID pairs. For example: `'dsl4/t7dg,k3l/ie6w'`
	*/
	PolicyIDs string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get v2 lists params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetV2ListsParams) WithDefaults() *GetV2ListsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get v2 lists params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetV2ListsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get v2 lists params
func (o *GetV2ListsParams) WithTimeout(timeout time.Duration) *GetV2ListsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get v2 lists params
func (o *GetV2ListsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get v2 lists params
func (o *GetV2ListsParams) WithContext(ctx context.Context) *GetV2ListsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get v2 lists params
func (o *GetV2ListsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get v2 lists params
func (o *GetV2ListsParams) WithHTTPClient(client *http.Client) *GetV2ListsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get v2 lists params
func (o *GetV2ListsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPolicyIDs adds the policyIDs to the get v2 lists params
func (o *GetV2ListsParams) WithPolicyIDs(policyIDs string) *GetV2ListsParams {
	o.SetPolicyIDs(policyIDs)
	return o
}

// SetPolicyIDs adds the policyIDs to the get v2 lists params
func (o *GetV2ListsParams) SetPolicyIDs(policyIDs string) {
	o.PolicyIDs = policyIDs
}

// WriteToRequest writes these params to a swagger request
func (o *GetV2ListsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param policyIDs
	qrPolicyIDs := o.PolicyIDs
	qPolicyIDs := qrPolicyIDs
	if qPolicyIDs != "" {

		if err := r.SetQueryParam("policyIDs", qPolicyIDs); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
