// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kyma-project/ip-auth/cpms/model"
)

// HeadV2ListsProjectIDPolicyIDReader is a Reader for the HeadV2ListsProjectIDPolicyID structure.
type HeadV2ListsProjectIDPolicyIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *HeadV2ListsProjectIDPolicyIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewHeadV2ListsProjectIDPolicyIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 304:
		result := NewHeadV2ListsProjectIDPolicyIDNotModified()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 400:
		result := NewHeadV2ListsProjectIDPolicyIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewHeadV2ListsProjectIDPolicyIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewHeadV2ListsProjectIDPolicyIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewHeadV2ListsProjectIDPolicyIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewHeadV2ListsProjectIDPolicyIDServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[HEAD /v2/lists/{projectID}/{policyID}] HeadV2ListsProjectIDPolicyID", response, response.Code())
	}
}

// NewHeadV2ListsProjectIDPolicyIDOK creates a HeadV2ListsProjectIDPolicyIDOK with default headers values
func NewHeadV2ListsProjectIDPolicyIDOK() *HeadV2ListsProjectIDPolicyIDOK {
	return &HeadV2ListsProjectIDPolicyIDOK{}
}

/*
HeadV2ListsProjectIDPolicyIDOK describes a response with status code 200, with default header values.

OK
*/
type HeadV2ListsProjectIDPolicyIDOK struct {

	/* Entity tag of the policy version
	 */
	ETag string

	/* Active policy version last modified date in [HTTP-date format](https://www.rfc-editor.org/rfc/rfc9110.html#name-last-modified)
	 */
	LastModified string

	/* Active policy version
	 */
	PolicyVersion string
}

// IsSuccess returns true when this head v2 lists project Id policy Id o k response has a 2xx status code
func (o *HeadV2ListsProjectIDPolicyIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this head v2 lists project Id policy Id o k response has a 3xx status code
func (o *HeadV2ListsProjectIDPolicyIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this head v2 lists project Id policy Id o k response has a 4xx status code
func (o *HeadV2ListsProjectIDPolicyIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this head v2 lists project Id policy Id o k response has a 5xx status code
func (o *HeadV2ListsProjectIDPolicyIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this head v2 lists project Id policy Id o k response a status code equal to that given
func (o *HeadV2ListsProjectIDPolicyIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the head v2 lists project Id policy Id o k response
func (o *HeadV2ListsProjectIDPolicyIDOK) Code() int {
	return 200
}

func (o *HeadV2ListsProjectIDPolicyIDOK) Error() string {
	return fmt.Sprintf("[HEAD /v2/lists/{projectID}/{policyID}][%d] headV2ListsProjectIdPolicyIdOK", 200)
}

func (o *HeadV2ListsProjectIDPolicyIDOK) String() string {
	return fmt.Sprintf("[HEAD /v2/lists/{projectID}/{policyID}][%d] headV2ListsProjectIdPolicyIdOK", 200)
}

func (o *HeadV2ListsProjectIDPolicyIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header ETag
	hdrETag := response.GetHeader("ETag")

	if hdrETag != "" {
		o.ETag = hdrETag
	}

	// hydrates response header Last-Modified
	hdrLastModified := response.GetHeader("Last-Modified")

	if hdrLastModified != "" {
		o.LastModified = hdrLastModified
	}

	// hydrates response header Policy-Version
	hdrPolicyVersion := response.GetHeader("Policy-Version")

	if hdrPolicyVersion != "" {
		o.PolicyVersion = hdrPolicyVersion
	}

	return nil
}

// NewHeadV2ListsProjectIDPolicyIDNotModified creates a HeadV2ListsProjectIDPolicyIDNotModified with default headers values
func NewHeadV2ListsProjectIDPolicyIDNotModified() *HeadV2ListsProjectIDPolicyIDNotModified {
	return &HeadV2ListsProjectIDPolicyIDNotModified{}
}

/*
HeadV2ListsProjectIDPolicyIDNotModified describes a response with status code 304, with default header values.

Not Modified
*/
type HeadV2ListsProjectIDPolicyIDNotModified struct {

	/* Entity tag of the policy version
	 */
	ETag string

	/* Active policy version last modified date in [HTTP-date format](https://www.rfc-editor.org/rfc/rfc9110.html#name-last-modified)
	 */
	LastModified string

	/* Active policy version
	 */
	PolicyVersion string
}

// IsSuccess returns true when this head v2 lists project Id policy Id not modified response has a 2xx status code
func (o *HeadV2ListsProjectIDPolicyIDNotModified) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this head v2 lists project Id policy Id not modified response has a 3xx status code
func (o *HeadV2ListsProjectIDPolicyIDNotModified) IsRedirect() bool {
	return true
}

// IsClientError returns true when this head v2 lists project Id policy Id not modified response has a 4xx status code
func (o *HeadV2ListsProjectIDPolicyIDNotModified) IsClientError() bool {
	return false
}

// IsServerError returns true when this head v2 lists project Id policy Id not modified response has a 5xx status code
func (o *HeadV2ListsProjectIDPolicyIDNotModified) IsServerError() bool {
	return false
}

// IsCode returns true when this head v2 lists project Id policy Id not modified response a status code equal to that given
func (o *HeadV2ListsProjectIDPolicyIDNotModified) IsCode(code int) bool {
	return code == 304
}

// Code gets the status code for the head v2 lists project Id policy Id not modified response
func (o *HeadV2ListsProjectIDPolicyIDNotModified) Code() int {
	return 304
}

func (o *HeadV2ListsProjectIDPolicyIDNotModified) Error() string {
	return fmt.Sprintf("[HEAD /v2/lists/{projectID}/{policyID}][%d] headV2ListsProjectIdPolicyIdNotModified", 304)
}

func (o *HeadV2ListsProjectIDPolicyIDNotModified) String() string {
	return fmt.Sprintf("[HEAD /v2/lists/{projectID}/{policyID}][%d] headV2ListsProjectIdPolicyIdNotModified", 304)
}

func (o *HeadV2ListsProjectIDPolicyIDNotModified) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header ETag
	hdrETag := response.GetHeader("ETag")

	if hdrETag != "" {
		o.ETag = hdrETag
	}

	// hydrates response header Last-Modified
	hdrLastModified := response.GetHeader("Last-Modified")

	if hdrLastModified != "" {
		o.LastModified = hdrLastModified
	}

	// hydrates response header Policy-Version
	hdrPolicyVersion := response.GetHeader("Policy-Version")

	if hdrPolicyVersion != "" {
		o.PolicyVersion = hdrPolicyVersion
	}

	return nil
}

// NewHeadV2ListsProjectIDPolicyIDBadRequest creates a HeadV2ListsProjectIDPolicyIDBadRequest with default headers values
func NewHeadV2ListsProjectIDPolicyIDBadRequest() *HeadV2ListsProjectIDPolicyIDBadRequest {
	return &HeadV2ListsProjectIDPolicyIDBadRequest{}
}

/*
HeadV2ListsProjectIDPolicyIDBadRequest describes a response with status code 400, with default header values.

failed to validate the request
*/
type HeadV2ListsProjectIDPolicyIDBadRequest struct {
}

// IsSuccess returns true when this head v2 lists project Id policy Id bad request response has a 2xx status code
func (o *HeadV2ListsProjectIDPolicyIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this head v2 lists project Id policy Id bad request response has a 3xx status code
func (o *HeadV2ListsProjectIDPolicyIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this head v2 lists project Id policy Id bad request response has a 4xx status code
func (o *HeadV2ListsProjectIDPolicyIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this head v2 lists project Id policy Id bad request response has a 5xx status code
func (o *HeadV2ListsProjectIDPolicyIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this head v2 lists project Id policy Id bad request response a status code equal to that given
func (o *HeadV2ListsProjectIDPolicyIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the head v2 lists project Id policy Id bad request response
func (o *HeadV2ListsProjectIDPolicyIDBadRequest) Code() int {
	return 400
}

func (o *HeadV2ListsProjectIDPolicyIDBadRequest) Error() string {
	return fmt.Sprintf("[HEAD /v2/lists/{projectID}/{policyID}][%d] headV2ListsProjectIdPolicyIdBadRequest", 400)
}

func (o *HeadV2ListsProjectIDPolicyIDBadRequest) String() string {
	return fmt.Sprintf("[HEAD /v2/lists/{projectID}/{policyID}][%d] headV2ListsProjectIdPolicyIdBadRequest", 400)
}

func (o *HeadV2ListsProjectIDPolicyIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewHeadV2ListsProjectIDPolicyIDForbidden creates a HeadV2ListsProjectIDPolicyIDForbidden with default headers values
func NewHeadV2ListsProjectIDPolicyIDForbidden() *HeadV2ListsProjectIDPolicyIDForbidden {
	return &HeadV2ListsProjectIDPolicyIDForbidden{}
}

/*
HeadV2ListsProjectIDPolicyIDForbidden describes a response with status code 403, with default header values.

Access denied
*/
type HeadV2ListsProjectIDPolicyIDForbidden struct {
}

// IsSuccess returns true when this head v2 lists project Id policy Id forbidden response has a 2xx status code
func (o *HeadV2ListsProjectIDPolicyIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this head v2 lists project Id policy Id forbidden response has a 3xx status code
func (o *HeadV2ListsProjectIDPolicyIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this head v2 lists project Id policy Id forbidden response has a 4xx status code
func (o *HeadV2ListsProjectIDPolicyIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this head v2 lists project Id policy Id forbidden response has a 5xx status code
func (o *HeadV2ListsProjectIDPolicyIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this head v2 lists project Id policy Id forbidden response a status code equal to that given
func (o *HeadV2ListsProjectIDPolicyIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the head v2 lists project Id policy Id forbidden response
func (o *HeadV2ListsProjectIDPolicyIDForbidden) Code() int {
	return 403
}

func (o *HeadV2ListsProjectIDPolicyIDForbidden) Error() string {
	return fmt.Sprintf("[HEAD /v2/lists/{projectID}/{policyID}][%d] headV2ListsProjectIdPolicyIdForbidden", 403)
}

func (o *HeadV2ListsProjectIDPolicyIDForbidden) String() string {
	return fmt.Sprintf("[HEAD /v2/lists/{projectID}/{policyID}][%d] headV2ListsProjectIdPolicyIdForbidden", 403)
}

func (o *HeadV2ListsProjectIDPolicyIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewHeadV2ListsProjectIDPolicyIDNotFound creates a HeadV2ListsProjectIDPolicyIDNotFound with default headers values
func NewHeadV2ListsProjectIDPolicyIDNotFound() *HeadV2ListsProjectIDPolicyIDNotFound {
	return &HeadV2ListsProjectIDPolicyIDNotFound{}
}

/*
HeadV2ListsProjectIDPolicyIDNotFound describes a response with status code 404, with default header values.

Requested Policy not found
*/
type HeadV2ListsProjectIDPolicyIDNotFound struct {
	Payload *model.APIErrorResponse
}

// IsSuccess returns true when this head v2 lists project Id policy Id not found response has a 2xx status code
func (o *HeadV2ListsProjectIDPolicyIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this head v2 lists project Id policy Id not found response has a 3xx status code
func (o *HeadV2ListsProjectIDPolicyIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this head v2 lists project Id policy Id not found response has a 4xx status code
func (o *HeadV2ListsProjectIDPolicyIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this head v2 lists project Id policy Id not found response has a 5xx status code
func (o *HeadV2ListsProjectIDPolicyIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this head v2 lists project Id policy Id not found response a status code equal to that given
func (o *HeadV2ListsProjectIDPolicyIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the head v2 lists project Id policy Id not found response
func (o *HeadV2ListsProjectIDPolicyIDNotFound) Code() int {
	return 404
}

func (o *HeadV2ListsProjectIDPolicyIDNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[HEAD /v2/lists/{projectID}/{policyID}][%d] headV2ListsProjectIdPolicyIdNotFound %s", 404, payload)
}

func (o *HeadV2ListsProjectIDPolicyIDNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[HEAD /v2/lists/{projectID}/{policyID}][%d] headV2ListsProjectIdPolicyIdNotFound %s", 404, payload)
}

func (o *HeadV2ListsProjectIDPolicyIDNotFound) GetPayload() *model.APIErrorResponse {
	return o.Payload
}

func (o *HeadV2ListsProjectIDPolicyIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(model.APIErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHeadV2ListsProjectIDPolicyIDInternalServerError creates a HeadV2ListsProjectIDPolicyIDInternalServerError with default headers values
func NewHeadV2ListsProjectIDPolicyIDInternalServerError() *HeadV2ListsProjectIDPolicyIDInternalServerError {
	return &HeadV2ListsProjectIDPolicyIDInternalServerError{}
}

/*
HeadV2ListsProjectIDPolicyIDInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type HeadV2ListsProjectIDPolicyIDInternalServerError struct {
	Payload *model.APIErrorResponse
}

// IsSuccess returns true when this head v2 lists project Id policy Id internal server error response has a 2xx status code
func (o *HeadV2ListsProjectIDPolicyIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this head v2 lists project Id policy Id internal server error response has a 3xx status code
func (o *HeadV2ListsProjectIDPolicyIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this head v2 lists project Id policy Id internal server error response has a 4xx status code
func (o *HeadV2ListsProjectIDPolicyIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this head v2 lists project Id policy Id internal server error response has a 5xx status code
func (o *HeadV2ListsProjectIDPolicyIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this head v2 lists project Id policy Id internal server error response a status code equal to that given
func (o *HeadV2ListsProjectIDPolicyIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the head v2 lists project Id policy Id internal server error response
func (o *HeadV2ListsProjectIDPolicyIDInternalServerError) Code() int {
	return 500
}

func (o *HeadV2ListsProjectIDPolicyIDInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[HEAD /v2/lists/{projectID}/{policyID}][%d] headV2ListsProjectIdPolicyIdInternalServerError %s", 500, payload)
}

func (o *HeadV2ListsProjectIDPolicyIDInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[HEAD /v2/lists/{projectID}/{policyID}][%d] headV2ListsProjectIdPolicyIdInternalServerError %s", 500, payload)
}

func (o *HeadV2ListsProjectIDPolicyIDInternalServerError) GetPayload() *model.APIErrorResponse {
	return o.Payload
}

func (o *HeadV2ListsProjectIDPolicyIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(model.APIErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHeadV2ListsProjectIDPolicyIDServiceUnavailable creates a HeadV2ListsProjectIDPolicyIDServiceUnavailable with default headers values
func NewHeadV2ListsProjectIDPolicyIDServiceUnavailable() *HeadV2ListsProjectIDPolicyIDServiceUnavailable {
	return &HeadV2ListsProjectIDPolicyIDServiceUnavailable{}
}

/*
HeadV2ListsProjectIDPolicyIDServiceUnavailable describes a response with status code 503, with default header values.

Service unavailable
*/
type HeadV2ListsProjectIDPolicyIDServiceUnavailable struct {
}

// IsSuccess returns true when this head v2 lists project Id policy Id service unavailable response has a 2xx status code
func (o *HeadV2ListsProjectIDPolicyIDServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this head v2 lists project Id policy Id service unavailable response has a 3xx status code
func (o *HeadV2ListsProjectIDPolicyIDServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this head v2 lists project Id policy Id service unavailable response has a 4xx status code
func (o *HeadV2ListsProjectIDPolicyIDServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this head v2 lists project Id policy Id service unavailable response has a 5xx status code
func (o *HeadV2ListsProjectIDPolicyIDServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this head v2 lists project Id policy Id service unavailable response a status code equal to that given
func (o *HeadV2ListsProjectIDPolicyIDServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the head v2 lists project Id policy Id service unavailable response
func (o *HeadV2ListsProjectIDPolicyIDServiceUnavailable) Code() int {
	return 503
}

func (o *HeadV2ListsProjectIDPolicyIDServiceUnavailable) Error() string {
	return fmt.Sprintf("[HEAD /v2/lists/{projectID}/{policyID}][%d] headV2ListsProjectIdPolicyIdServiceUnavailable", 503)
}

func (o *HeadV2ListsProjectIDPolicyIDServiceUnavailable) String() string {
	return fmt.Sprintf("[HEAD /v2/lists/{projectID}/{policyID}][%d] headV2ListsProjectIdPolicyIdServiceUnavailable", 503)
}

func (o *HeadV2ListsProjectIDPolicyIDServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
